@using Blazor.Client.Models

<div class="message-container">
    @if (Model.IsFirst)
    {
        <div class="message-padding"></div>
        <img class="avatar" src="user.png" alt="Avatar"/>
        <div class="username">@Model.Author</div>
        <div class="date" data-date="@LongDate">@Date</div>
    }
    else
    {
        <div class="content-only-date">@ShortDate</div>
    }

    <div class="message-content">
        @if (Model.Embed is not null)
        {
            <MessageEmbed Model="Model.Embed"/>
        }
        <div style="white-space: pre-wrap">@Model.Content</div>
    </div>
</div>

<style>
    .message-listbox {
        height: 80vh;
        overflow: auto;
        display: flex;
        flex-direction: column-reverse;
    }

    .message-container {
        display: grid;
        grid-template-columns: 60px min-content min-content auto;
        grid-template-rows: min-content;
        margin: 4px 0;
        padding-right: 5px;
    }

    .avatar {
        border-radius: 50%;
        width: 50px;
        height: 50px;
        grid-column: 1;
        grid-row: 2 / 4;
        margin-left: 5px;
    }

    .username {
        grid-column: 2;
        grid-row: 2;
        margin-right: 5px;
        font-size: 20px;
        font-weight: bold;
        color: whitesmoke;
    }

    .date {
        grid-column: 3;
        grid-row: 2;
        margin-left: 5px;
        white-space: nowrap;
        color: darkgray;
        font-size: 14px;
        align-self: center;
        position: relative;
    }

    .date:hover::after {
        content: attr(data-date);
        position: absolute;
        top: 0;
        left: 0;
        margin-left: -5px;
        padding: 0 5px;
        background: #333333;
        color: white;
        
    }

    .content-only-date {
        grid-column: 1;
        grid-row: 3;
        display: none;
        white-space: nowrap;
        color: darkgray;
        margin-top: 4px;
        font-size: 14px;
        margin-left: 10px; 
    }

    .message-container:hover .content-only-date {
        display: block;
    }

    .message-container:hover {
        background: #333333
    }

    .message-padding {
        height: 10px;
        grid-column: 1 / 5;
        grid-row: 1;
    }

    .message-content {
        grid-column: 2 / 5;
        grid-row: 3;
        font-size: 18px;
        color: white;
    }

</style>

@code {
    [Parameter] public required MessageModel Model { get; set; }

    private string? _date;
    private string? _longDate;
    private string? _shortDate;

    public string Date => _date ??= TimeStampConverter(Model.Timestamp, DateFormatMode.Default);
    public string LongDate => _longDate ??= TimeStampConverter(Model.Timestamp, DateFormatMode.Long);
    public string ShortDate => _shortDate ??= TimeStampConverter(Model.Timestamp, DateFormatMode.Short);

    private static string TimeStampConverter(DateTimeOffset dateTime, DateFormatMode formatMode)
    {
        //var format = detailed ? 

        //if (dateTime.Date == DateTime.Today)
        //{
        //    return $"Today {dateTime.ToLocalTime().ToString(format)}";
        //}

        //if (dateTime.Date == DateTime.Today.AddDays(-1))
        //{
        //    return $"Yesterday {dateTime.ToLocalTime().ToString(format)}";
        //}

        //var fullFormat = detailed ? "dd-MM-yyyy HH:mm:ss" : "dd-MM-yyyy HH:mm";
        //return dateTime.ToLocalTime().ToString(fullFormat);

        var format = formatMode == DateFormatMode.Long ? "HH:mm:ss" : "HH:mm";
        if (formatMode == DateFormatMode.Short)
        {
            return dateTime.ToLocalTime().ToString(format);
        }

        if (dateTime.Date == DateTime.Today)
        {
            return $"Today {dateTime.ToLocalTime().ToString(format)}";
        }

        if (dateTime.Date == DateTime.Today.AddDays(-1))
        {
            return $"Yesterday {dateTime.ToLocalTime().ToString(format)}";
        }

        var fullFormat = formatMode == DateFormatMode.Long ? "dd-MM-yyyy HH:mm:ss" : "dd-MM-yyyy HH:mm";
        return dateTime.ToLocalTime().ToString(fullFormat);
    }

    private enum DateFormatMode
    {
        Default,
        Short,
        Long
    }
}