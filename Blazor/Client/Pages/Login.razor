@page "/login"
@using RestSharp
@using System.Text.Json
@using System.Net
@using System.Security.Cryptography
@using System.Text
@using Blazor.Client.Models
@using Blazor.Client.Services
@using Blazor.Shared

@inject NavigationManager Navigation
@inject JWTService JwtService

<PageTitle>Login</PageTitle>

<h1>Login</h1>

<EditForm Model="_userCredentials" OnValidSubmit="HandleSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<p>
		<InputText @bind-Value="_userCredentials.Username" placeholder="Username" />
	</p>
	
	<p>
		<InputText @bind-Value="_userCredentials.Password" placeholder="Password" type="password"/>
	</p>
	
	<p>
		<button class="btn btn-primary" type="submit">Log In</button>
		<button class="btn btn-primary" type="submit" @onclick="HandleSignUp">Sign Up</button>
    </p>
	
	@if (_working)
	{
		<p><em>Loading...</em></p>
	}
	
	<p style="color:@_color;">@_info</p>


</EditForm>

@code {
	private UserCredentials _userCredentials = new();
	private IRestClient _restClient = new RestClient(new Uri("http://squadtalk.ddns.net"));
	private bool _working;

	private const string Red = "#FF0000";
	private const string White = "#0000000";

	private string? _info;
	private string? _color;

	private async Task HandleSubmit()
	{
		_working = true;
		await AuthenticateAsync("api/user/login", "Logged in successfully");
		_working = false;
	}

    private async Task HandleSignUp()
    {
        var context = new EditContext(_userCredentials);
        var isValid = context.Validate();

        context.NotifyValidationStateChanged();
    }

    private void RedirectToMain(string jwt)
    {
		JwtService.SetToken(jwt);
		Navigation.NavigateTo("app");
    }

	private async Task AuthenticateAsync(string endpoint, string successMessage, CancellationToken cancellationToken = default)
	{
		_color = "#000000";
		_info = string.Empty;

		var request = new RestRequest(endpoint, Method.Post);

		var input = Encoding.UTF8.GetBytes(_userCredentials.Password!);
		var hash = SHA256.HashData(input);

		var dto = new UserCredentialsDto {Username = _userCredentials.Username, PasswordHash = Convert.ToBase64String(hash)};
		request.AddBody(dto);

		try
		{
			var response = await _restClient.PostAsync(request, cancellationToken);
			if (response.IsSuccessStatusCode)
			{
				_info = successMessage;
				var jwt = JsonSerializer.Deserialize<string>(response.Content!);
				RedirectToMain(jwt!);
			}
			else if (response.StatusCode == HttpStatusCode.NotFound)
			{
				_color = "#FF0000";
				_info = $"User {_userCredentials.Username} not found";
			}
		}
		catch (HttpRequestException e)
		{
			_color = "#FF0000";
			_info = e.StatusCode switch
			{
				HttpStatusCode.Conflict => $"Username {_userCredentials.Username} is already taken",
				HttpStatusCode.Unauthorized => "Invalid username or password",
				null => "Unable to connect to the server",
				_ => $"Server error: {e.StatusCode}"
			};
		}
	}
}
